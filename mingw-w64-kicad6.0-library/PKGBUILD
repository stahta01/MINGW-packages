# Support libraries for KiCad

_realname=kicad
_kicad_basever=6.0
pkgbase=mingw-w64-${_realname}${_kicad_basever}-library
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}${_kicad_basever}-footprints"
         "${MINGW_PACKAGE_PREFIX}-${_realname}${_kicad_basever}-symbols"
#         "${MINGW_PACKAGE_PREFIX}-${_realname}${_kicad_basever}-packages3D"
         "${MINGW_PACKAGE_PREFIX}-${_realname}${_kicad_basever}-templates")
pkgver=${_kicad_basever}.7
pkgrel=1
pkgdesc="Support libraries for KiCad (mingw-w64)"
arch=('any')
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32')
url='https://www.kicad.org/'
license=("spdx:GPL-3.0-or-later")
groups=("${MINGW_PACKAGE_PREFIX}-eda")
optdepends=("${MINGW_PACKAGE_PREFIX}-${_realname}${_kicad_basever}")
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja")
options=('!strip')
source=("${_realname}-footprints-${pkgver}.tar.gz"::"https://gitlab.com/kicad/libraries/kicad-footprints/-/archive/${pkgver}/kicad-footprints-${pkgver}.tar.gz"
        "${_realname}-symbols-${pkgver}.tar.gz"::"https://gitlab.com/kicad/libraries/kicad-symbols/-/archive/${pkgver}/kicad-symbols-${pkgver}.tar.gz"
#        "${_realname}-packages3D-${pkgver}.tar.gz"::"https://gitlab.com/kicad/libraries/kicad-packages3D/-/archive/${pkgver}/kicad-packages3D-${pkgver}.tar.gz"
        "${_realname}-templates-${pkgver}.tar.gz"::"https://gitlab.com/kicad/libraries/kicad-templates/-/archive/${pkgver}/kicad-templates-${pkgver}.tar.gz")
sha256sums=('3dabfa018597c181e9ca1add4c78d50d5bf38500c1c665510bb37e0ea7b5ba7e'
            '03a888a516e3899cbc7dada1127e9c0309c0f7a8d995aa0dd9c7aa7f6f3a9d7f'
#            'e8d008f743330c4b46e8d2ad518ad554653a2c5b3866f59a865ec4334e68b3aa'
            '1da05f4067b16c4b8be8e172cc73ddc5ce05977f384dd7e531f23c7fdc69da8a')
build() {
  declare -a extra_config
  if check_option "debug" "n"; then
    extra_config+=("-DCMAKE_BUILD_TYPE=Release")
  else
    extra_config+=("-DCMAKE_BUILD_TYPE=Debug")
  fi

#  for _s in "footprints" "symbols" "templates" "packages3D"; do
  for _s in "footprints" "symbols" "templates"; do
    msg2 "Build kicad-${_s}"
    [[ -d "${srcdir}"/build-${_s}-${MSYSTEM} ]] && rm -rf "${srcdir}"/build-${_s}-${MSYSTEM}
    mkdir -p "${srcdir}/build-${_s}-${MSYSTEM}" && cd "${srcdir}/build-${_s}-${MSYSTEM}"

    MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
      "${MINGW_PREFIX}"/bin/cmake.exe \
        -GNinja \
        -DCMAKE_INSTALL_PREFIX="${MINGW_PREFIX}" \
        "${extra_config[@]}" \
        ../${_realname}-${_s}-${pkgver}

    "${MINGW_PREFIX}"/bin/cmake.exe --build .
  done
}

package_footprints() {
  pkgdesc="KiCad footprint libraries (mingw-w64)"
  conflicts=(${MINGW_PACKAGE_PREFIX}-${_realname}-footprints)
  provides=(${MINGW_PACKAGE_PREFIX}-${_realname}-footprints)

  cd "${srcdir}/build-footprints-${MSYSTEM}"

  DESTDIR="${pkgdir}" "${MINGW_PREFIX}"/bin/cmake.exe --install .
}

package_symbols() {
  pkgdesc="KiCad symbol libraries (mingw-w64)"
  conflicts=(${MINGW_PACKAGE_PREFIX}-${_realname}-symbols)
  provides=(${MINGW_PACKAGE_PREFIX}-${_realname}-symbols)

  cd "${srcdir}/build-symbols-${MSYSTEM}"

  DESTDIR="${pkgdir}" "${MINGW_PREFIX}"/bin/cmake.exe --install .
}

package_templates() {
  pkgdesc="KiCad template libraries (mingw-w64)"
  conflicts=(${MINGW_PACKAGE_PREFIX}-${_realname}-templates)
  provides=(${MINGW_PACKAGE_PREFIX}-${_realname}-templates)

  cd "${srcdir}/build-templates-${MSYSTEM}"

  DESTDIR="${pkgdir}" "${MINGW_PREFIX}"/bin/cmake.exe --install .
}

package_packages3D() {
  pkgdesc="KiCad 3D model libraries (mingw-w64)"
  conflicts=(${MINGW_PACKAGE_PREFIX}-${_realname}-packages3D)
  provides=(${MINGW_PACKAGE_PREFIX}-${_realname}-packages3D)

  cd "${srcdir}/build-packages3D-${MSYSTEM}"

  DESTDIR="${pkgdir}" "${MINGW_PREFIX}"/bin/cmake.exe --install .
}

# template start; name=mingw-w64-splitpkg-wrappers; version=1.0;
# vim: set ft=bash :

# generate wrappers
for _name in "${pkgname[@]}"; do
  _short="package_${_name#${MINGW_PACKAGE_PREFIX}-${_realname}6.0-}"
  _func="$(declare -f "${_short}")"
  eval "${_func/#${_short}/package_${_name}}"
done
# template end;
