# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Tim Stahlhut <stahta01@gmail.com>

# See https://aur.archlinux.org/packages/codelite if trying to convert to not using git repo

_wx_basever=3.2

_realname=codelite
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"
conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}-git")
replaces=("${MINGW_PACKAGE_PREFIX}-${_realname}-git")
pkgver=18.3.0+c4.g49a4bb179
pkgrel=1
pkgdesc="Open-source, cross platform IDE for the C/C++ programming languages (mingw-w64)"
arch=('any')
mingw_arch=('ucrt64' 'clang64')
url="https://codelite.org/"
msys2_repository_url="https://github.com/eranif/codelite"
license=('spdx:GPL-2.0-or-later')
depends=("${MINGW_PACKAGE_PREFIX}-cc-libs"
         "${MINGW_PACKAGE_PREFIX}-hunspell"
         "${MINGW_PACKAGE_PREFIX}-libssh"
         "${MINGW_PACKAGE_PREFIX}-drmingw"
         "${MINGW_PACKAGE_PREFIX}-clang"      # libclang
         "${MINGW_PACKAGE_PREFIX}-uchardet"
         "${MINGW_PACKAGE_PREFIX}-wxwidgets${_wx_basever}-msw-libs"
         "${MINGW_PACKAGE_PREFIX}-sqlite3"
         "${MINGW_PACKAGE_PREFIX}-clang-tools-extra"
         "${MINGW_PACKAGE_PREFIX}-libmariadbclient"
         "${MINGW_PACKAGE_PREFIX}-postgresql"
         "${MINGW_PACKAGE_PREFIX}-openssl"
         )
optdepends=("${MINGW_PACKAGE_PREFIX}-clang: compiler")
makedepends=('git' 'dos2unix' 'flex' 'bison'
             "${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-wxwidgets${_wx_basever}-msw"
             "${MINGW_PACKAGE_PREFIX}-boost"
             #"${MINGW_PACKAGE_PREFIX}-clang"
            )
#_sourcedir=${_realname}-${pkgver}
#source=("https://github.com/eranif/codelite/archive/${pkgver}/${_realname}-${pkgver}.tar.gz"
_sourcedir=${_realname}-git
source=("${_sourcedir}"::"git+https://github.com/eranif/codelite.git"
        004-Replace-CMAKE_INSTALL_PREFIX-with-CL_INSTALL_BIN.patch
        005-Extend-support-of-WITH_POSIX_LAYOUT.patch
        006-Guard-WXWIN-and-other-stuff-with-FOR_MSYS2_PACKAGE.patch
        # No idea what this patch does or if it is needed
        007-strip-whitespaces-flags.patch
        008-Reduce-Clang-compiler-warnings-likely-wxWidgets-rela.patch
        011-Add-include-of-cstdint.patch
        012-Add-include-of-cstdint.patch
        013-set-developer-log.patch
        # 201 patch is from upstream repo
        201-Add-include-of-cstdint.patch)
sha256sums=('SKIP'
            '4c709706a98f530503e1a00081a0400829240ee3a4661aaa7e481179959d229a'
            '44f494e7b3d35cad40c2698ff23f8bbe2182306061aed70f2dad4a7faa81fb3f'
            '927248a77455f7a6e5ae1a52cfa78d4cba480208598803ef8c886986512734e1'
            'a9e5539e31c664a84e42412cdd30b44699a92efb2fb6f51000010bb958c10219'
            '3eebd94d9b785749ac16163d37949278758dabdb3a9919bcf61b17cc504ec32a'
            '7ec4bb333bcc37f2761f32b37e5b54cdd35bfc24bda45eec93bc3244157f399b'
            '9a986435f98af1534d2e3f1009a81baaed94afdcb3d23d2ec139dcf4ce7a4259'
            '191017e45672f6945db79f1e67844d10df622e894d64afebad6937fbbc8e8412'
            '9255590950242fd0870e0dd6d8771ee367a49563b95e6b2f7ff4eeadb721baf6')

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _patch in "$@"
  do
    if patch --dry-run -Rbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Skipping ${_patch} because it likely was already applied"
    else
      msg2 "Applying ${_patch}"
      patch -Nbp1 -i "${srcdir}/${_patch}"
    fi
  done
}

# Declare global variables; begin with underscore to avoid name conflicts
_git_base_commit=

pkgver() {
  cd "${srcdir}/${_sourcedir}"
  local _version=$(head -n 200 CMakeLists.txt | grep 'set(CODELITE_VERSION' | sed -e 's/.* //' | tr '\n' '.' | sed -e 's/\"//g' | sed -e 's/[)]//g' | sed 's/.$/\n/')

  printf "%s+c%s.g%s" ${_version} $(git rev-list --count ${_git_base_commit}..HEAD) $(git rev-parse --short ${_git_base_commit})
}

prepare() {
  cd "${srcdir}/${_sourcedir}"

  _git_base_commit=$(git rev-parse HEAD)

  GIT_AM="git am --committer-date-is-author-date"
  git config --local user.name  "nobody"
  git config --local user.email "nobody@example.com"

  git submodule update --init --recursive

  # Work around the issue of the tinyjson folder being empty (reason commit is missing)
  cd "${srcdir}/${_sourcedir}"/submodules/cc-wrapper && git clone https://github.com/eranif/tinyjson || true
  cd "${srcdir}/${_sourcedir}"

  git am --abort || true

  ${GIT_AM} "${srcdir}"/004-Replace-CMAKE_INSTALL_PREFIX-with-CL_INSTALL_BIN.patch
  ${GIT_AM} "${srcdir}"/005-Extend-support-of-WITH_POSIX_LAYOUT.patch
  ${GIT_AM} "${srcdir}"/006-Guard-WXWIN-and-other-stuff-with-FOR_MSYS2_PACKAGE.patch
  ${GIT_AM} "${srcdir}"/008-Reduce-Clang-compiler-warnings-likely-wxWidgets-rela.patch
  #apply_patch_with_msg 012-Add-include-of-cstdint.patch

  # Results in more data being placed in codelite.log under %APPDATA%/codelite/logs
  # Useful to find startup problems and likely other problems
  # Once the program works correctly it would likely be a good idea to stop applying it.
  apply_patch_with_msg 013-set-developer-log.patch

  ## File has CRLF in it
  #dos2unix LiteEditor/cl_editor.h
  #apply_patch_with_msg 011-Add-include-of-cstdint.patch

  # No idea if 007-strip-whitespaces-flags.patch is needed
  apply_patch_with_msg \
    007-strip-whitespaces-flags.patch

  cd "${srcdir}/${_sourcedir}/submodules/yaml-cpp"
  apply_patch_with_msg 201-Add-include-of-cstdint.patch
}

build() {
  [[ -d ${srcdir}/build-${MSYSTEM} ]] && rm -rf ${srcdir}/build-${MSYSTEM}
  [[ -f ${srcdir}/build-${MSYSTEM}/CMakeCache.txt ]] && rm -f ${srcdir}/build-${MSYSTEM}/CMakeCache.txt
  mkdir -p ${srcdir}/build-${MSYSTEM} && cd ${srcdir}/build-${MSYSTEM}

  local -a extra_config
  if check_option "debug" "y"; then
    extra_config+=( -DCMAKE_BUILD_TYPE=Debug )
  else
    extra_config+=( -DCMAKE_BUILD_TYPE=Release )
  fi

  MSYS2_ARG_CONV_EXCL="-DCL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake \
    -Wno-dev \
    -G"MSYS Makefiles" \
    -DCL_PREFIX=${MINGW_PREFIX} \
    -DCMAKE_POLICY_VERSION_MINIMUM=3.5 \
    -DWITH_POSIX_LAYOUT=1 \
    -DFOR_MSYS2_PACKAGE=1 \
    -DwxWidgets_CONFIG_EXECUTABLE=${MINGW_PREFIX}/bin/wx-config-${_wx_basever} \
    -DwxWidgets_wxrc_EXECUTABLE=${MINGW_PREFIX}/bin/wxrc-${_wx_basever} \
    "${extra_config[@]}" \
    ../${_sourcedir}

  ${MINGW_PREFIX}/bin/cmake --build .
}

package() {
  cd build-${MSYSTEM}

  DESTDIR="${pkgdir}" ${MINGW_PREFIX}/bin/cmake --install .

  install -Dm644 "${srcdir}"/${_sourcedir}/LICENSE "${pkgdir}"${MINGW_PREFIX}/share/licenses/${_realname}/LICENSE

  # why?
  rm -f "${pkgdir}"${MINGW_PREFIX}/lib/codelite/*.a
  rm -f "${pkgdir}"${MINGW_PREFIX}/lib/*.a
}
